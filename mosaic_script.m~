clc; clear; close all;

srcDir = '~/tp/athina/Mosaic-MATLAB/src';
inDir = '~/tp/athina/data/4294/output';
outDir = '~/tp/athina/data/4294/output/mosaic_20160531_144143';

% movieFiles = {...
%     %'recording_20160118_140521.xml', ...
%     'recording_20160125_114209.xml'...
% };

movieFiles = {...
    'mcorr_recording_20160531_144143.tif',
    'mcorr_recording_20160531_144143-1.tif'
};

% crop parameters
crop = [0 0 0 0];

% RoI used for motion correction
roi = [390 370 1310 930];

prefsFile = '/home/athina/Data/inscopix/examplePrefs.mat';
workDir = '/home/athina/Data/inscopix/temp';
memoryQuota = 16;
driveQuota = 40;

% numMovies = length(movieFiles);
% let's start with one
numMovies = length(movieFiles);

if ~exist(outDir, 'dir')
    mkdir(outDir);
end

addpath(srcDir);

prefs = mosaic.Preferences(prefsFile, workDir, memoryQuota, driveQuota);
mosaic.initialize('preferences', prefs);

%% load tiff movies

movies = mosaic.List('mosaic.Movie');
for m = 1:numMovies
    movie = mosaic.loadMovieTiff(fullfile(inDir, movieFiles{m}));
    movies.add(movie);
end
clear movie

%% crop movies

croppedMovies = mosaic.List('mosaic.Movie');
for m = 1:numMovies
    croppedMovie = mosaic.cropMovie(movies.get(m), ...
        crop(1), crop(2), crop(3), crop(4), 'coordinateSystem', 'pixels');
    croppedMovies.add(croppedMovie);
end
clear movies croppedMovie;

%% Preprocess the data to reduce data volume and remove artifacts.
ppMovies = mosaic.List('mosaic.Movie');
for m = 1:numMovies
    ppMovie = mosaic.preprocessMovie(croppedMovies.get(m), ...
       'fixDefectivePixels', true, ...
       'fixRowNoise', false, ...
       'fixDroppedFrames', false, ...
       'spatialDownsampleFactor', 1); % do not downsample
    ppMovies.add(ppMovie);
    ppMovies.add(croppedMovies.get(m));
    movName = fullfile(outDir, sprintf('preproc_%s.tif',croppedMovies.get(m).getName()));
    mosaic.saveMovieTiff(ppMovie, movName, 'compression', 'None');
end
clear ppMovie movName croppedMovies;

%% concatenate movie files to one file
concatMovie = mosaic.concatenateMovies(ppMovies, ...
    'gapType', 'Add one time period between movies');
clear ppMovies;

%% Correct motion in each movie.

mcMovies = mosaic.List('mosaic.Movie');
referenceFrame = mosaic.extractFrame(concatMovie, 'frame', 1);
mcRoi = mosaic.RectangleRoi(mosaic.Point(roi(1), roi(2)), mosaic.Point(roi(3), roi(4)));
%mcRoi.view(concatMovie);

[mcMovie, translations] = mosaic.motionCorrectMovie(concatMovie, ... 
    'motionType', 'Translation', ... 
    'roi', mcRoi, ... 
    'speedWeight', 0.1, ... 
    'parallelProcess', true, ... 
    'invertImage', true, ... 
    'normalizeImage', false, ... 
    'subtractSpatialMean', true, ... %true, ... 
    'subtractSpatialMeanPixels', 20, ... 
    'applySpatialMean', true, ... %true, ... 
    'applySpatialMeanPixels', 5, ... 
    'minimumValue', -102, ... 
    'maximumValue', 108, ... 
    'autoCrop', true);
clear concatMovie;
    
movName = fullfile(outDir, sprintf('mcorr_%s.tif',movieFiles{1}));
mosaic.saveMovieTiff(mcMovie, movName, 'compression', 'None');

clear concatMovie movName;

%% Temporally downsample and save as .mat for CNMF-E
currentStep = mcMovie.getTimingInfo().getStep();
desiredStep = 0.2; % CNMF wants 5 Hz data input
downsamplingFactor = round(desiredStep / currentStep);
Y = mcMovie.getData();
Y = Y(:,:,1:downsamplingFactor:end);

Ysiz = size(Y)';
Yfs = 1/desiredStep;

nam_mat = sprintf('%s%sready_%s.mat',path,filesep,movieFiles{1});
save(nam_mat, 'Y', 'Ysiz', 'Yfs', '-v7.3');

%% Normalize the movie by the mean frame (df/f).
dffMovies = mosaic.List('mosaic.Movie');
for m = 1:numMovies
    dffMovie = mosaic.normalizeMovie(mcMovies.get(m), 'method', '(f-f0)/f0');
    dffMovies.add(dffMovie);
end
clear mcMovies; clear dffMovie;

% %% Save the processed movie for later.
% dffMovieFile = fullfile(outDir, 'processedMovie.mat');
% mosaic.saveOneObject(dffMovie, dffMovieFile);

%% Identify cells using PCA-ICA.
ICSs = mosaic.List('mosaic.Group');
for m=1:numMovies
    ics = mosaic.pcaIca(dffMovies.get(m), 'unmix', 'traces', ...
        'numPCs', 200, 'numICs', 150, 'icaMaxIterations', 800);
    %icTraces = ics.getList('types', {'mosaic.Trace'});
    %icMixingImages = ics.getMixingImages();
    %icUnmixingImages = ics.getUnmixingImages();
    
    ICSs.add(ics);
end

%% Save the ICs.
for m=1:numMovies
    icsFile = fullfile(outDir, 'ICSs_All.mat');
    mosaic.saveList(ICSs, icsFile);
end
%% 
icTracesAll = mosaic.List('mosaic.List');
icMixingImagesAll = mosaic.List('mosaic.List');
icUnmixingImagesAll = mosaic.List('mosaic.List');
for m=1:numMovies
    
    icTraces = ICSs.get(m).getList('types', {'mosaic.Trace'});
    icMixingImages = ICSs.get(m).getMixingImages();
    icUnmixingImages = ICSs.get(m).getUnmixingImages();
    
    icTracesAll.add(icTraces);
    icMixingImagesAll.add(icMixingImages);
    icUnmixingImagesAll.add(icUnmixingImages);
end
clear icTraces; clear icMixingImages; clear icUnmixingImages;

%% view the last three traces of the IC found
for m=1:numMovies
    numICs = icTracesAll.get(m).getSize();
    for n=numICs-2:numICs
        icTracesAll.get(m).get(n).view();
    end
end

%% Detect events in IC traces.
eventTracesAll = mosaic.List('mosaic.List');
for m=1:numMovies
    icTraces = icTracesAll.get(m);
    eventTraces = mosaic.List('mosaic.Trace');
    for i = 1:icTraces.getSize()
        eventTrace = mosaic.detectEvents(icTraces.get(i));
        eventTraces.add(eventTrace);
    end
    
    eventTracesAll.add(eventTraces);
end
clear eventTraces; clear icTraces;

%% Save the events.
for m=1:numMovies
    eventsFile = fullfile(outDir, sprintf('ICs-events_%s.mat',movies.get(m).getName()));
    mosaic.saveList(eventTracesAll.get(m), eventsFile);
end

%% Terminate the Mosaic script session.
mosaic.terminate();